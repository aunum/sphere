syntax = "proto3";

package sphere.api.v1alpha;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// The Environment API.
service EnvironmentAPI {
    // Info about the environment.
    rpc Info (Empty) returns (InfoResponse) {
        option (google.api.http) = {
            get: "/v1alpha/info"
        };
    }

    // Create an environment.
    rpc CreateEnv (CreateEnvRequest) returns (CreateEnvResponse) {
        option (google.api.http) = {
            post: "/v1alpha/envs"
            body: "*"
          };
    };

    // List all environments.
    rpc ListEnvs (ListEnvRequest) returns (ListEnvResponse) {
        option (google.api.http) = {
            get: "/v1alpha/envs"
        };
    };

    // List all environment models that can be created.
    rpc ListModels (ListModelsRequest) returns (ListModelsResponse) {
        option (google.api.http) = {
            get: "/v1alpha/models"
        };
    };

    // Gen an environment.
    rpc GetEnv (GetEnvRequest) returns (GetEnvResponse) {
        option (google.api.http) = {
            get: "/v1alpha/envs/{id}"
        };
    };

    // Reset an environment.
    rpc ResetEnv (ResetEnvRequest) returns (ResetEnvResponse) {
        option (google.api.http) = {
            put: "/v1alpha/envs/{id}/reset"
            body: "*"
        };
    };

    // Step through an environment.
    rpc StepEnv (StepEnvRequest) returns (StepEnvResponse) {
        option (google.api.http) = {
            post: "/v1alpha/envs/{id}/step"
            body: "*"
        };
    };

    // Get a sample action for the environment.
    rpc SampleAction (SampleActionRequest) returns (SampleActionResponse) {
        option (google.api.http) = {
            get: "/v1alpha/envs/{id}/sample_action"
        };
    };

    // Start recording an environment.
    rpc StartRecordEnv (StartRecordEnvRequest) returns (StartRecordEnvResponse) {
        option (google.api.http) = {
            post: "/v1alpha/envs/{id}/record/start"
            body: "*"
        };
    }

    // Stop recording an environment.
    rpc StopRecordEnv (StopRecordEnvRequest) returns (StopRecordEnvResponse) {
        option (google.api.http) = {
            post: "/v1alpha/envs/{id}/record/stop"
            body: "*"
        };
    }

    // Results from the environment.
    rpc Results (ResultsRequest) returns (ResultsResponse) {
        option (google.api.http) = {
            get: "/v1alpha/envs/{id}/results"
        };
    }

    // Stream result video.
    rpc GetVideo (GetVideoRequest) returns (stream GetVideoResponse) {
        option (google.api.http) = {
            get: "/v1alpha/envs/{id}/video/{episode_id}"
        };
    }

    // Delete a result video.
    rpc DeleteVideo (DeleteVideoRequest) returns (DeleteVideoResponse) {
        option (google.api.http) = {
            delete: "/v1alpha/envs/{id}/video/{episode_id}"
        };
    }

    // Delete an environment.
    rpc DeleteEnv (DeleteEnvRequest) returns (DeleteEnvResponse) {
        option (google.api.http) = {
            delete: "/v1alpha/envs/{id}"
        };
    }
}

// Response containing info about the environment.
message InfoResponse {
    // Name of this environment server.
    string server_name = 1;
}

// Request to create an environment
message CreateEnvRequest {
    // Name of the environment model.
    string model_name = 1;
}

// Response from creating an environment.
message CreateEnvResponse {
    // Environment created.
    Environment environment = 1;
}

// Request to list environments.
message ListEnvRequest {
    // Limit the number of environments returned.
    int32 limit = 1;

    // Where to start returning list from.
    int32 offset = 2;
}

// Response from listing environments.
message ListEnvResponse {
    // List of environments.
    repeated Environment envs = 1;
}

// Request to get an environment.
message GetEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from getting an environment.
message GetEnvResponse {
    // Environment returned.
    Environment env = 1;
}

// Request to list models.
message ListModelsRequest {
    // Limit the number of models returned.
    int32 limit = 1;

    // Where to start returning list from.
    int32 offset = 2;
}

// Response from listing models.
message ListModelsResponse {
    // List of models.
    repeated Model models = 1;
}

// Response from resetting an environment.
message ResetEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from resetting an environment.
message ResetEnvResponse {
    // Observation of environment after resetting.
    Observation observation = 1;
}

// Request to step in an environment.
message StepEnvRequest {
    // ID of the environment.
    string id = 1;

    // Step with given value.
    int32 value = 2;
}

// Response from stepping in an environment.
message StepEnvResponse {
    // Observation after step.
    Observation observation = 1;

    // Reware after step.
    float reward = 2;

    // The environment is finished.
    bool done = 3;
}

// Request to get a sample action for an environment.
message SampleActionRequest {
    // ID of the environment.
    string id = 1;
}

// Response containing a sample action from the environment.
message SampleActionResponse {
    // Sample action value.
    int32 value = 1;
}

// Request to start recording an environment.
message StartRecordEnvRequest {
    // ID of the environment.
    string id = 1;

    // Overwrite any existing data.
    bool force = 2;

    // Resume and add to any existing data.
    bool resume = 3;

    // Episodic rate for capturing video recordings.
    enum VideoSamplingRate {
        // Record on episodes that are perfect cubes e.g. 0, 1, 8, 27, 64, ... every 1000th
        CUBIC = 0;
        // Do not record any episodes.
        NONE = 1;
        // Record every episode.
        ALL = 2;
        // Record every tenth episode.
        TENTH = 3;
        // Record every hundredth episode.
        HUNDRETH = 4;
    }

    // Episodic rate for capturing video recordings. Defaults to CUBIC.
    VideoSamplingRate video_sampling_rate = 4;
}

// Response from beginning to record an environment.
message StartRecordEnvResponse {
    // Message pertaining to beginning recording.
    string message = 1;
}

// Request to stop recording an environment.
message StopRecordEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from stopping the recording of an environment.
message StopRecordEnvResponse {
    // Message of the outcome.
    string message = 1;
}

// Request for environment results.
message ResultsRequest {
    // ID of the environment.
    string id = 1;
}

// Response with environment results.
message ResultsResponse {
    // Map of episode ID to episode result.
    map<int32, EpisodeResult> episode_results = 1;

    // Map of episode ID to video.
    map<int32, Video> videos = 2;
}

// Request to get a result video.
message GetVideoRequest {
    // ID of the environment.
    string id = 1;

    // ID of the episode.
    int32 episode_id = 2;
}

// Response with chunked result video.
message GetVideoResponse {
    // Chunk of mp4 video.
    bytes chunk = 1;
}

// Request to delete a result video.
message DeleteVideoRequest {
    // ID of the environment.
    string id = 1;

    // ID of the episode.
    string episode_id = 2;
}

// Response from deleting a video.
message DeleteVideoResponse {
    // Message from deletion.
    string message = 1;
}

// Request to delete an environment.
message DeleteEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from deleting an environment.
message DeleteEnvResponse {
    // Message from deleting environment.
    string message = 1;
}

// Observation of environment.
message Observation {
    // Data from environment.
    repeated float data = 1;

    // Shape of environment.
    repeated int32 shape = 2;
}

// Environment agents can interact with.
message Environment {
    // Name of the model used to build the environment.
    string model_name = 1;

    // ID of the environment.
    string id = 2;

    // Action space info
    Space action_space = 3;

    // Observation space info
    Space observation_space = 4;

    // Number of potential actions.
    int32 num_actions = 5;

    // Maximum number of episode steps.
    int32 max_episode_steps = 6;
}

// A space.
message Space {
    // Name of the space.
    string name = 1;

    oneof info {
        // Discrete space info.
        DiscreteSpace discrete = 2;

        // Box space info.
        BoxSpace box = 3;

        // Mult-discrete space info.
        MultiDiscreteSpace multi_discrete = 4;

        // A struct of spaces.
        StructSpace struct_space = 5;
    }
}

// A struct of spaces.
message StructSpace {
    // Space struct.
    map<string, Space> struct = 1;
}

// A discrete space in math:`{ 0, 1, ..., n-1 \}`.
message DiscreteSpace {
    // Upper bound of discrete space n-1.
    int64 n = 1;
}

// A (possibly unbounded) box in R^n. Specifically, a Box represents the
// Cartesian product of n closed intervals. Each interval has the form of one
// of [a, b], (-oo, b], [a, oo), or (-oo, oo).
message BoxSpace {
    // Shape of box.
    repeated int32 shape = 1;

    // From low.
    repeated float low = 2;

    // To high.
    repeated float high = 3;
}

// The multi-discrete action space consists of a series of discrete action spaces with different number of actions in eachs.
// - It is useful to represent game controllers or keyboards where each key can be represented as a discrete action space
// - It is parametrized by passing an array of positive integers specifying number of actions for each discrete action space
// Note: Some environment wrappers assume a value of 0 always represents the NOOP action.
// e.g. Nintendo Game Controller
// - Can be conceptualized as 3 discrete action spaces:
//    1) Arrow Keys: Discrete 5  - NOOP[0], UP[1], RIGHT[2], DOWN[3], LEFT[4]  - params: min: 0, max: 4
//    2) Button A:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1
//    3) Button B:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1
message MultiDiscreteSpace {
    // An array of discrete spaces.
    repeated int32 discrete_spaces = 1;
}

// Model which environments can be created from.
message Model {
    // Name of the model.
    string name = 1;

    // Description of the model.
    string description = 2;
}

// Results from a single episode.
message EpisodeResult {
    // The episode ID.
    int32 episode_id = 1;

    // Time this episode ran.
    google.protobuf.Timestamp timestamp = 2;

    // Length of the episode.
    int32 episode_length = 3;

    // Reward of the episode.
    float reward = 4;
}

// Video from an episode.
message Video {
    // The episode ID.
    int32 episode_id = 1;

    // Media type for the video.
    string content_type = 2;
}

// Empty message.
message Empty {}