{
  "swagger": "2.0",
  "info": {
    "title": "v1alpha/env.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1alpha/envs": {
      "get": {
        "summary": "List all environments.",
        "operationId": "ListEnvs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Limit the number of environments returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Where to start returning list from.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      },
      "post": {
        "summary": "Create an environment.",
        "operationId": "CreateEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaCreateEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaCreateEnvRequest"
            }
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}": {
      "get": {
        "summary": "Gen an environment.",
        "operationId": "GetEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      },
      "delete": {
        "summary": "Delete an environment.",
        "operationId": "DeleteEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/record/start": {
      "post": {
        "summary": "Start recording an environment.",
        "operationId": "StartRecordEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaStartRecordEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaStartRecordEnvRequest"
            }
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/record/stop": {
      "post": {
        "summary": "Stop recording an environment.",
        "operationId": "StopRecordEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaStopRecordEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaStopRecordEnvRequest"
            }
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/reset": {
      "put": {
        "summary": "Reset an environment.",
        "operationId": "ResetEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaResetEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaResetEnvRequest"
            }
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/results": {
      "get": {
        "summary": "Results from the environment.",
        "operationId": "Results",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaResultsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/sample_action": {
      "get": {
        "summary": "Get a sample action for the environment.",
        "operationId": "SampleAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaSampleActionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/step": {
      "post": {
        "summary": "Step through an environment.",
        "operationId": "StepEnv",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaStepEnvResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaStepEnvRequest"
            }
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/envs/{id}/video/{episodeId}": {
      "get": {
        "summary": "Stream result video.",
        "operationId": "GetVideo",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/v1alphaGetVideoResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "episodeId",
            "description": "ID of the episode.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      },
      "delete": {
        "summary": "Delete a result video.",
        "operationId": "DeleteVideo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteVideoResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the environment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "episodeId",
            "description": "ID of the episode.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/info": {
      "get": {
        "summary": "Info about the environment.",
        "operationId": "Info",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaInfoResponse"
            }
          }
        },
        "tags": [
          "EnvironmentAPI"
        ]
      }
    },
    "/v1alpha/models": {
      "get": {
        "summary": "List all environment models that can be created.",
        "operationId": "ListModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListModelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Limit the number of models returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Where to start returning list from.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EnvironmentAPI"
        ]
      }
    }
  },
  "definitions": {
    "StartRecordEnvRequestVideoSamplingRate": {
      "type": "string",
      "enum": [
        "CUBIC",
        "NONE",
        "ALL",
        "TENTH",
        "HUNDRETH"
      ],
      "default": "CUBIC",
      "description": "Episodic rate for capturing video recordings.\n\n - CUBIC: Record on episodes that are perfect cubes e.g. 0, 1, 8, 27, 64, ... every 1000th\n - NONE: Do not record any episodes.\n - ALL: Record every episode.\n - TENTH: Record every tenth episode.\n - HUNDRETH: Record every hundredth episode."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpcCode": {
          "type": "integer",
          "format": "int32"
        },
        "httpCode": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alphaBoxSpace": {
      "type": "object",
      "properties": {
        "shape": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Shape of box."
        },
        "low": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "From low."
        },
        "high": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "To high."
        }
      },
      "description": "A (possibly unbounded) box in R^n. Specifically, a Box represents the\nCartesian product of n closed intervals. Each interval has the form of one\nof [a, b], (-oo, b], [a, oo), or (-oo, oo)."
    },
    "v1alphaCreateEnvRequest": {
      "type": "object",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "Name of the environment model."
        }
      },
      "title": "Request to create an environment"
    },
    "v1alphaCreateEnvResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/v1alphaEnvironment",
          "description": "Environment created."
        }
      },
      "description": "Response from creating an environment."
    },
    "v1alphaDeleteEnvResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message from deleting environment."
        }
      },
      "description": "Response from deleting an environment."
    },
    "v1alphaDeleteVideoResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message from deletion."
        }
      },
      "description": "Response from deleting a video."
    },
    "v1alphaDiscreteSpace": {
      "type": "object",
      "properties": {
        "n": {
          "type": "string",
          "format": "int64",
          "description": "Upper bound of discrete space n-1."
        }
      },
      "description": "A discrete space in math:`{ 0, 1, ..., n-1 \\}`."
    },
    "v1alphaEnvironment": {
      "type": "object",
      "properties": {
        "modelName": {
          "type": "string",
          "description": "Name of the model used to build the environment."
        },
        "id": {
          "type": "string",
          "description": "ID of the environment."
        },
        "actionSpace": {
          "$ref": "#/definitions/v1alphaSpace",
          "title": "Action space info"
        },
        "observationSpace": {
          "$ref": "#/definitions/v1alphaSpace",
          "title": "Observation space info"
        },
        "numActions": {
          "type": "integer",
          "format": "int32",
          "description": "Number of potential actions."
        },
        "maxEpisodeSteps": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of episode steps."
        }
      },
      "description": "Environment agents can interact with."
    },
    "v1alphaEpisodeResult": {
      "type": "object",
      "properties": {
        "episodeId": {
          "type": "integer",
          "format": "int32",
          "description": "The episode ID."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Time this episode ran."
        },
        "episodeLength": {
          "type": "integer",
          "format": "int32",
          "description": "Length of the episode."
        },
        "reward": {
          "type": "number",
          "format": "float",
          "description": "Reward of the episode."
        }
      },
      "description": "Results from a single episode."
    },
    "v1alphaGetEnvResponse": {
      "type": "object",
      "properties": {
        "env": {
          "$ref": "#/definitions/v1alphaEnvironment",
          "description": "Environment returned."
        }
      },
      "description": "Response from getting an environment."
    },
    "v1alphaGetVideoResponse": {
      "type": "object",
      "properties": {
        "chunk": {
          "type": "string",
          "format": "byte",
          "description": "Chunk of mp4 video."
        }
      },
      "description": "Response with chunked result video."
    },
    "v1alphaInfoResponse": {
      "type": "object",
      "properties": {
        "serverName": {
          "type": "string",
          "description": "Name of this environment server."
        }
      },
      "description": "Response containing info about the environment."
    },
    "v1alphaListEnvResponse": {
      "type": "object",
      "properties": {
        "envs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaEnvironment"
          },
          "description": "List of environments."
        }
      },
      "description": "Response from listing environments."
    },
    "v1alphaListModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModel"
          },
          "description": "List of models."
        }
      },
      "description": "Response from listing models."
    },
    "v1alphaModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the model."
        },
        "description": {
          "type": "string",
          "description": "Description of the model."
        }
      },
      "description": "Model which environments can be created from."
    },
    "v1alphaMultiDiscreteSpace": {
      "type": "object",
      "properties": {
        "discreteSpaces": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "An array of discrete spaces."
        }
      },
      "title": "The multi-discrete action space consists of a series of discrete action spaces with different number of actions in eachs.\n- It is useful to represent game controllers or keyboards where each key can be represented as a discrete action space\n- It is parametrized by passing an array of positive integers specifying number of actions for each discrete action space\nNote: Some environment wrappers assume a value of 0 always represents the NOOP action.\ne.g. Nintendo Game Controller\n- Can be conceptualized as 3 discrete action spaces:\n   1) Arrow Keys: Discrete 5  - NOOP[0], UP[1], RIGHT[2], DOWN[3], LEFT[4]  - params: min: 0, max: 4\n   2) Button A:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1\n   3) Button B:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1"
    },
    "v1alphaResetEnvRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the environment."
        }
      },
      "description": "Response from resetting an environment."
    },
    "v1alphaResetEnvResponse": {
      "type": "object",
      "properties": {
        "observation": {
          "$ref": "#/definitions/v1alphaTensor",
          "description": "Observation of environment after resetting."
        }
      },
      "description": "Response from resetting an environment."
    },
    "v1alphaResultsResponse": {
      "type": "object",
      "properties": {
        "episodeResults": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alphaEpisodeResult"
          },
          "description": "Map of episode ID to episode result."
        },
        "videos": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alphaVideo"
          },
          "description": "Map of episode ID to video."
        }
      },
      "description": "Response with environment results."
    },
    "v1alphaSampleActionResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Sample action value."
        }
      },
      "description": "Response containing a sample action from the environment."
    },
    "v1alphaSpace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the space."
        },
        "discrete": {
          "$ref": "#/definitions/v1alphaDiscreteSpace",
          "description": "Discrete space info."
        },
        "box": {
          "$ref": "#/definitions/v1alphaBoxSpace",
          "description": "Box space info."
        },
        "multiDiscrete": {
          "$ref": "#/definitions/v1alphaMultiDiscreteSpace",
          "description": "Mult-discrete space info."
        },
        "structSpace": {
          "$ref": "#/definitions/v1alphaStructSpace",
          "description": "A struct of spaces."
        }
      },
      "description": "A space."
    },
    "v1alphaStartRecordEnvRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the environment."
        },
        "force": {
          "type": "boolean",
          "format": "boolean",
          "description": "Overwrite any existing data."
        },
        "resume": {
          "type": "boolean",
          "format": "boolean",
          "description": "Resume and add to any existing data."
        },
        "videoSamplingRate": {
          "$ref": "#/definitions/StartRecordEnvRequestVideoSamplingRate",
          "description": "Episodic rate for capturing video recordings. Defaults to CUBIC."
        }
      },
      "description": "Request to start recording an environment."
    },
    "v1alphaStartRecordEnvResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message pertaining to beginning recording."
        }
      },
      "description": "Response from beginning to record an environment."
    },
    "v1alphaStepEnvRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the environment."
        },
        "action": {
          "type": "integer",
          "format": "int32",
          "description": "Step with given action."
        }
      },
      "description": "Request to step in an environment."
    },
    "v1alphaStepEnvResponse": {
      "type": "object",
      "properties": {
        "observation": {
          "$ref": "#/definitions/v1alphaTensor",
          "description": "Observation after step."
        },
        "reward": {
          "type": "number",
          "format": "float",
          "description": "Reward from step."
        },
        "done": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the environment is finished."
        },
        "info": {
          "type": "object",
          "description": "Extra information from environment, to be used for debugging."
        }
      },
      "description": "Response from stepping in an environment."
    },
    "v1alphaStopRecordEnvRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the environment."
        }
      },
      "description": "Request to stop recording an environment."
    },
    "v1alphaStopRecordEnvResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message of the outcome."
        }
      },
      "description": "Response from stopping the recording of an environment."
    },
    "v1alphaStructSpace": {
      "type": "object",
      "properties": {
        "struct": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alphaSpace"
          },
          "description": "Space struct."
        }
      },
      "description": "A struct of spaces."
    },
    "v1alphaTensor": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "Data from environment."
        },
        "shape": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Shape of environment."
        }
      },
      "description": "Tensor is an n-dimensional data array."
    },
    "v1alphaVideo": {
      "type": "object",
      "properties": {
        "episodeId": {
          "type": "integer",
          "format": "int32",
          "description": "The episode ID."
        },
        "contentType": {
          "type": "string",
          "description": "Media type for the video."
        }
      },
      "description": "Video from an episode."
    }
  },
  "x-stream-definitions": {
    "v1alphaGetVideoResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1alphaGetVideoResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1alphaGetVideoResponse"
    }
  }
}
