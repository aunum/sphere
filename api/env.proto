syntax = "proto3";

package sphere.api;

import "google/api/annotations.proto";;

// A Sphere server.
service Sphere {
    // Info about this Sphere instance.
    rpc Info (Empty) returns (InfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    // Create an environment.
    rpc CreateEnv (CreateEnvRequest) returns (CreateEnvResponse) {
        option (google.api.http) = {
            post: "/v1/envs"
            body: "*"
          };
    };

    // List all environments.
    rpc ListEnvs (ListEnvRequest) returns (ListEnvResponse) {
        option (google.api.http) = {
            get: "/v1/envs"
        };
    };

    // List all environment models that can be created.
    rpc ListModels (ListModelsRequest) returns (ListModelsResponse) {
        option (google.api.http) = {
            get: "/v1/env-models"
        };
    };

    // Gen an environment.
    rpc GetEnv (GetEnvRequest) returns (GetEnvResponse) {
        option (google.api.http) = {
            get: "/v1/envs/{id}"
        };
    };

    // Reset an environment.
    rpc ResetEnv (ResetEnvRequest) returns (ResetEnvResponse) {
        option (google.api.http) = {
            put: "/v1/envs/{id}/reset"
            body: "*"
        };
    };

    // Step through an environment.
    rpc StepEnv (StepEnvRequest) returns (StepEnvResponse) {
        option (google.api.http) = {
            post: "/v1/envs/{id}/step"
            body: "*"
        };
    };

    // // Stream observations from the environment.
    // rpc WatchEnv (WatchEnvRequest) returns (stream WatchEnvResponse) {
    //     option (google.api.http) = {
    //         get: "/v1/envs/{id}/watch"
    //     };
    // }

    // // Stream actions and observations from the environment.
    // rpc InteractEnv (stream InteractEnvRequest) returns (stream InteractEnvResponse) {
    //     option (google.api.http) = {
    //         post: "/v1/envs/{id}/interact"
    //         body: "*"
    //     };
    // }
}

// Response for Sphere info.
message InfoResponse {
    // Version of Sphere running.
    string version = 1;
}

// Request to create an environment
message CreateEnvRequest {
    // Name of the environment model.
    string model_name = 1;
}

// Response from creating an environment.
message CreateEnvResponse {
    // Shape of the observation.
    repeated int32 observation_shape = 1;

    // Number of actions.
    int32 num_actions = 2;

    // Maximum number of episode steps.
    int32 max_episode_steps = 3;
}

// Request to list environments.
message ListEnvRequest {
    // Limit the number of environments returned.
    int32 limit = 1;

    // Where to start returning list from.
    int32 offset = 2;
}

// Response from listing environments.
message ListEnvResponse {
    // List of environments.
    repeated Environment envs = 1;
}

// Request to get an environment.
message GetEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from getting an environment.
message GetEnvResponse {
    // Environment data.
    Environment env = 1;
}

// Request to list models.
message ListModelsRequest {
    // Limit the number of models returned.
    int32 limit = 1;

    // Where to start returning list from.
    int32 offset = 2;
}

// Response from listing models.
message ListModelsResponse {
    // List of models.
    repeated Model models = 1;
}

// Response from resetting an environment.
message ResetEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from resetting an environment.
message ResetEnvResponse {
    // Observation of environment after resetting.
    Observation observation = 1;
}

// Request to step in an environment.
message StepEnvRequest {
    // ID of the environment.
    string id = 1;

    // Step with given value.
    int32 value = 2;
}

// Response from stepping in an environment.
message StepEnvResponse {
    // Observation after step.
    Observation observation = 1;

    // Reware after step.
    float reward = 2;

    // Observation for next episode.
    Observation next_episode = 3;
}

// Request to watch an environment.
message WatchEnvRequest {
    // ID of the environment.
    string id = 1;
}

// Response from watching an environment.
message WatchEnvResponse {
    // Observation after step.
    Observation observation = 1;

    // Reware after step.
    float reward = 2;

    // Observation for next episode.
    Observation next_episode = 3;
}

// Request to interact in an environment.
message InteractEnvRequest {
    // ID of the environment.
    string id = 1;

    // Step with given value.
    int32 value = 2;
}

// Response from interacting in an environment.
message InteractEnvResponse {
    // Observation after step.
    Observation observation = 1;

    // Reware after step.
    float reward = 2;

    // Observation for next episode.
    Observation next_episode = 3;
}

// Observation of environment.
message Observation {
    // Data from environment.
    repeated float data = 1;

    // Shape of environment.
    repeated int32 shape = 2;
}

// Environment agents can interact with.
message Environment {
    // Name of the model used to build the environment.
    string model_name = 1;

    // ID of the environment.
    string id = 2;
}

// Model environments can be created from.
message Model {
    // Name of the model.
    string name = 1;

    // Description of the model.
    string description = 2;
}

// Empty message.
message Empty {}